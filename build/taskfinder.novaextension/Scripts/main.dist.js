"use strict";var d=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var b=(e,s)=>{for(var t in s)d(e,t,{get:s[t],enumerable:!0})},J=(e,s,t,a)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of P(s))!x.call(e,o)&&o!==t&&d(e,o,{get:()=>s[o],enumerable:!(a=T(s,o))||a.enumerable});return e};var N=e=>J(d({},"__esModule",{value:!0}),e);var c=(e,s,t)=>new Promise((a,o)=>{var n=k=>{try{r(t.next(k))}catch(p){o(p)}},i=k=>{try{r(t.throw(k))}catch(p){o(p)}},r=k=>k.done?a(k.value):Promise.resolve(k.value).then(n,i);r((t=t.apply(e,s)).next())});var j={};b(j,{activate:()=>$,deactivate:()=>A});module.exports=N(j);var h=class{constructor(){this.tasks=[],this.packageProcessName="composer",this.packageJsonPath=`${nova.workspace.path}/composer.json`}findTasks(){let s=nova.fs.stat(this.packageJsonPath);if(s&&s.isFile())try{let t=nova.fs.open(this.packageJsonPath).read(),a=JSON.parse(t);a.hasOwnProperty("scripts")&&a.scripts.forEach(o=>{if(a.scripts.hasOwnProperty(o)){let n=new Task(o);n.setAction(Task.Run,new TaskProcessAction(this.packageProcessName,{cwd:nova.workspace.path,args:["run",o],shell:!0})),this.tasks.push(n)}})}catch(t){console.log(t)}}provideTasks(){return this.findTasks(),console.info(`${this.packageJsonPath} has ${this.tasks.length} task(s)`),this.tasks}},l=h;var f=class{constructor(){this.statusUpdate=()=>console.info(`Node settings: Using ${this.packageManager}`);this.tasks=[],this.packageManager=nova.workspace.config.get("taskfinder.package-manager","String"),this.packageJsonPath=`${nova.workspace.path}/package.json`}findTasks(){let s=nova.fs.stat(this.packageJsonPath);if(s&&s.isFile())try{let a=nova.fs.open(this.packageJsonPath).read(),o=JSON.parse(a);if(o.hasOwnProperty("scripts")){for(var t in o.scripts)if(o.scripts.hasOwnProperty(t)){let n=[],i=new Task(t);switch(this.packageManager){case"yarn":n=[t];break;default:n=["run",t]}i.setAction(Task.Run,new TaskProcessAction(this.packageManager,{shell:!0,args:n})),this.tasks.push(i),n=[]}}}catch(a){console.log(a)}}provideTasks(){return this.statusUpdate(),this.findTasks(),console.info(`${this.packageJsonPath} has ${this.tasks.length} task(s)`),this.tasks}},g=f;var w=class{constructor(){this.packageProcessName="task",this.tasks=[],this.options={cwd:nova.workspace.path,args:["--list-all"],shell:!0}}findTasks(){return c(this,null,function*(){try{let s=new Process("task",this.options);s.onStdout(a=>{let o=/\* ([A-Za-z0-9-_]+)\:/,n=a.match(o);if(n){let i=n[1],r=new Task(i);r.setAction(Task.Run,new TaskProcessAction(this.packageProcessName,{cwd:nova.workspace.path,args:[i],shell:!0})),this.tasks.push(r)}}),s.onStderr(a=>console.warn(`finder (taskfile) extraction error: ${a}`));let t=new Promise((a,o)=>{s.onDidExit(n=>{console.log(`exited: finder (taskfile) with code ${n}`),(n==0?a:o)(n)})});return s.start(),t}catch(s){console.log(s)}})}provideTasks(){return c(this,null,function*(){return yield this.findTasks(),console.info(`taskfile has ${this.tasks.length} task(s)`),this.tasks})}},u=w;var v=class{constructor(){this.packageProcessName="maid",this.tasks=[],this.options={cwd:nova.workspace.path,args:["butler","json"],shell:!0}}findTasks(){return c(this,null,function*(){try{let s=new Process("maid",this.options);s.onStdout(a=>{let o=JSON.parse(a).tasks;Object.keys(JSON.parse(a).tasks).forEach(i=>{if(o[i].hide!=!0&&!i.startsWith("_")){let r=new Task(i);i.includes("build")||i.includes("compile")?(r.setAction(Task.Build,new TaskProcessAction(this.packageProcessName,{cwd:nova.workspace.path,args:[i],shell:!0})),this.tasks.push(r)):(r.setAction(Task.Run,new TaskProcessAction(this.packageProcessName,{cwd:nova.workspace.path,args:[i],shell:!0})),this.tasks.push(r))}})}),s.onStderr(a=>console.warn(`finder (maidfile) extraction error: ${a}`));let t=new Promise((a,o)=>{s.onDidExit(n=>{console.log(`exited: finder (Maidfile) with code ${n}`),(n==0?a:o)(n)})});return s.start(),t}catch(s){console.log(s)}})}provideTasks(){return c(this,null,function*(){return yield this.findTasks(),console.info(`maidfile has ${this.tasks.length} task(s)`),this.tasks})}},m=v;var A=()=>console.info("Deactivating TaskFinder"),$=()=>c(void 0,null,function*(){if(console.log(`Starting TaskFinder (nova v${nova.extension.version})`),nova.workspace.config.get("taskfinder.auto-node","boolean")){console.info("Reading package.json...");let e=nova.fs.watch("*package.json",()=>nova.workspace.reloadTasks()),s=nova.assistants.registerTaskAssistant(new g,{identifier:"taskfinder-tasks-node",name:"Node"});nova.subscriptions.add(e),nova.subscriptions.add(s)}if(nova.workspace.config.get("taskfinder.auto-composer","boolean")){console.info("Reading composer.json...");let e=nova.fs.watch("*composer.json",()=>nova.workspace.reloadTasks()),s=nova.assistants.registerTaskAssistant(new l,{identifier:"taskfinder-tasks-composer",name:"composer.json"});nova.subscriptions.add(e),nova.subscriptions.add(s)}if(nova.workspace.config.get("taskfinder.auto-taskfile","boolean")){console.info("Reading Taskfile.*...");let e=nova.fs.watch("*Taskfile.*",()=>nova.workspace.reloadTasks()),s=nova.assistants.registerTaskAssistant(new u,{identifier:"taskfinder-tasks-taskfile",name:"Taskfile"});nova.subscriptions.add(e),nova.subscriptions.add(s)}if(nova.workspace.config.get("taskfinder.auto-maidfile","boolean")){console.info("Reading maidfile(.*)...");let e=nova.fs.watch("*maidfile",()=>nova.workspace.reloadTasks()),s=nova.fs.watch("*maidfile.*",()=>nova.workspace.reloadTasks()),t=nova.assistants.registerTaskAssistant(new m,{identifier:"taskfinder-tasks-maidfile",name:"Maid"});nova.subscriptions.add(e),nova.subscriptions.add(s),nova.subscriptions.add(t)}});
